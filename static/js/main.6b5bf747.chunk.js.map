{"version":3,"sources":["features/filter.ts","features/todos.ts","features/quary.ts","features/selectTodo.ts","app/store.ts","api.ts","components/Loader/Loader.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterType","todoSlice","createSlice","name","initialState","todos","reducers","setTodos","state","action","payload","actions","filter","ALL","filterSlice","setFilter","quarySlice","quary","setQuary","selectTodoSlice","todo","setSelectedTodo","store","configureStore","reducer","todoReducer","filterReducer","quaryReducer","selectTodo","selectTodoReducer","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","className","TodoList","useSelector","selectedTodo","find","id","dispatch","useDispatch","preparedTodos","completed","title","includes","map","type","onClick","TodoFilter","value","onChange","event","target","ACTIVE","COMPLETED","placeholder","style","pointerEvents","TodoModal","useState","isLoading","setIsLoading","selectedUser","setSelectedUser","useEffect","userId","response","href","email","App","todosData","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b5bf747.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\nexport enum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n\nexport interface Filter {\n  filter: string,\n}\n\nconst initialState: Filter = {\n  filter: FilterType.ALL,\n};\n\nconst filterSlice = createSlice({\n  name: 'filter',\n  initialState,\n  reducers: {\n    setFilter(state, action: PayloadAction<string>) {\n      // eslint-disable-next-line no-param-reassign\n      state.filter = action.payload;\n    },\n  },\n});\n\nexport const { setFilter } = filterSlice.actions;\nexport default filterSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\nimport { Todo } from '../types/Todo';\n\nexport interface TodoState {\n  todos: Todo[],\n}\n\nconst initialState: TodoState = {\n  todos: [],\n};\n\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    setTodos(state, action: PayloadAction<Todo[]>) {\n      // eslint-disable-next-line no-param-reassign\n      state.todos = action.payload;\n    },\n  },\n});\n\nexport const { setTodos } = todoSlice.actions;\nexport default todoSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\nexport interface Quary {\n  quary: string,\n}\n\nconst initialState: Quary = {\n  quary: '',\n};\n\nconst quarySlice = createSlice({\n  name: 'quary',\n  initialState,\n  reducers: {\n    setQuary(state, action: PayloadAction<string>) {\n      // eslint-disable-next-line no-param-reassign\n      state.quary = action.payload;\n    },\n  },\n});\n\nexport const { setQuary } = quarySlice.actions;\nexport default quarySlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\nexport interface Quary {\n  todo: number | null,\n}\n\nconst initialState: Quary = {\n  todo: null,\n};\n\nconst selectTodoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    setSelectedTodo(state, action: PayloadAction<number | null>) {\n      // eslint-disable-next-line no-param-reassign\n      state.todo = action.payload;\n    },\n  },\n});\n\nexport const { setSelectedTodo } = selectTodoSlice.actions;\nexport default selectTodoSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from '../features/todos';\nimport filterReducer from '../features/filter';\nimport quaryReducer from '../features/quary';\nimport selectTodoReducer from '../features/selectTodo';\n\nexport const store = configureStore({\n  reducer: {\n    todos: todoReducer,\n    filter: filterReducer,\n    quary: quaryReducer,\n    selectTodo: selectTodoReducer,\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../app/store';\nimport { setSelectedTodo } from '../../features/selectTodo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useSelector((state: RootState) => state.todos.todos);\n  const filter = useSelector((state: RootState) => state.filter.filter);\n  const quary = useSelector((state: RootState) => state.quary.quary);\n  const selectedTodo = useSelector((state: RootState) => (\n    todos.find(todo => todo.id === state.selectTodo.todo)\n  ));\n  const dispatch = useDispatch();\n  const filteredTodos = todos.filter(todo => {\n    switch (filter) {\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      case 'all':\n      default:\n        return todo;\n    }\n  });\n\n  const preparedTodos = filteredTodos\n    .filter(todo => todo.title.includes(quary));\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {preparedTodos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            key={todo.id}\n            className={(todo === selectedTodo)\n              ? 'has-background-info-light'\n              : ''}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed\n              && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={todo.completed ? 'has-text-success'\n                  : 'has-text-danger'}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  dispatch(setSelectedTodo(todo.id));\n                }}\n              >\n                <span className=\"icon\">\n                  {(todo === selectedTodo)\n                    ? (<i className=\"far fa-eye-slash\" />)\n                    : (<i className=\"far fa-eye\" />)}\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../app/store';\nimport { setQuary } from '../../features/quary';\nimport { setFilter, FilterType } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const filter = useSelector((state: RootState) => state.filter.filter);\n  const quary = useSelector((state: RootState) => state.quary.quary);\n  const dispatch = useDispatch();\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter}\n            onChange={(event) => {\n              dispatch(setFilter(event.target.value));\n            }}\n          >\n            <option value={FilterType.ALL}>All</option>\n            <option value={FilterType.ACTIVE}>Active</option>\n            <option value={FilterType.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={quary}\n          onChange={(event) => dispatch(setQuary(event.target.value))}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => dispatch(setQuary(''))}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { RootState } from '../../app/store';\nimport { setSelectedTodo } from '../../features/selectTodo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const dispatch = useDispatch();\n  const todos = useSelector((state: RootState) => state.todos.todos);\n  const selectedTodo = useSelector((state: RootState) => (\n    todos.find(todo => todo.id === state.selectTodo.todo)\n  ));\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId).then(response => {\n        setSelectedUser(response);\n        setIsLoading(false);\n      });\n    }\n  });\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo №${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(setSelectedTodo(null))}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${selectedUser !== null ? selectedUser.email : ''}`}>\n                {selectedUser !== null ? selectedUser.name : ''}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { setTodos } from './features/todos';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { RootState } from './app/store';\n\nexport const App = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useDispatch();\n  const selectedTodo = useSelector((state: RootState) => state.selectTodo.todo);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos().then(todosData => {\n      if (todosData && todosData.length) {\n        dispatch(setTodos(todosData));\n        setIsLoading(false);\n      }\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"section\">\n        <div className=\"box\">\n          <h1 className=\"title\">Redux list of todos</h1>\n          <TodoFilter />\n          {isLoading ? <Loader /> : (\n            <TodoList />\n          )}\n          {selectedTodo && <TodoModal />}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}